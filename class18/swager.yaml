openapi: 3.0.0
info:
  version: 1.0.0.0
  title: 'fsArmy - my blog api'
  description: 'This is the first professional api project we creating in full-stack army. This is a simple blog api application where anyone can create a new account, login to their system and create articles that will be visible publicly.'
  contact:
    name: fs army
    url: https://fsarmy.com
    email: support@gmail.com
servers:
  - description: blog api server
    url:  http://localhost:3000/api/v1
tags:
  - name: auth
    description: authentication endpoint (public)
  - name: articles
    description: articles endpoint (public + private)
  - name: comment
    description: comment endpoint (private)
  - name: user
    description: user endpoint (admin only)
paths:
  '/auth/signup':
    post:
      description: create a new account
      tags: [auth]
      requestBody:
        content:
          'aplication/json':
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: mohammdad aymon
                email:
                  type: object
                  example: mdaiman20@gmail.com
                password:
                  type: object
                  example: password123
              required: [name,email,password]
      responses:
        '201':
          description: signup successfull
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: object
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: singup successfull
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            example: '/auth/signup'
                          signin:
                            type: string
                            example: '/auth/signin'
        "400":
          description: 'Bad Request'
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  error:
                    type: string
                    example: Bad Request
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        field: 
                          type: string
                          example: email
                        message:
                          type: string
                          example: Invalid email
                        in:
                          type: string
                          enum: [query, body]
                          example: body
        "500":
          description: Internal Server error
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  error:
                    type: string
                    example: internal server error
                  message:
                    type: string
                    example: we are sorry for the inconvenience.
  '/auth/signin':
    post:
      description: Login to your account
      tags: [auth]
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: mdaiman201@gmail.com
                  pattern: >-
                      ^(?:[\w\-+!#$%&'*/=?^`|{}~]+(?:\.[\w\-+!#$%&'*/=?^`|{}~]+)*)@(?:(?:[A-Za-z0-9](?:[\w\-]{0,61}[A-Za-z0-9])?)(?:\.(?:[A-Za-z0-9](?:[\w\-]{0,61}[A-Za-z0-9])?))*\.[A-Za-z]{2,})$
                  minLength: 6
                  maxLength: 320
                  x-42c-format: o:email
                password:
                  type: object
                  format: password
                  example: password123
              required: [email,password]
      responses:
        '201':
          description: signin successfull
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: signin successfull
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: '/auth/signup'
        "400":
          $ref: '#/components/responses/400'
        "500":
          $ref: '#/components/responses/500'
  '/articles':
    get:
      description: Retrive all published articles
      tags: [articles]
      parameters:
        - $ref: '#/components/parameters/pagePram'
        - $ref: '#/components/parameters/limitPram'
        - $ref: '#/components/parameters/sortTypeParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          description: return a list of articles
          content:
            'application/json':
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            title: 
                              type: string
                              example: first article
                            cover:
                              type: string
                              format: url
                              example: https://s3.aws.com/myfirstblog/124.jpg
                            author:
                              $ref: '#/components/schemas/AuthorDTO'
                            link: 
                              type: string
                              format: url
                              example: '/articles/1'
                          required: [id, title, author]
                        - $ref: '#/components/schemas/Timestamp'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                          
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/articles?page=2&limit=10'
                      next:
                        type: string
                        format: url
                        example: '/articles?page=3&limit=10'
                      prev:
                        type: string
                        format: url
                        example: '/articles?page=1&limit=10'
        '400':
          $ref: '#/components/responses/400'
        '500':
          '$ref': '#/components/responses/500'
    post:
      tags: [articles]
      description: Create a new article
      requestBody:
        description: To create a new article user must need to provide valid data
        content:
          'application/json':
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: First article
                body:
                  type: string
                  format: text
                  example: Body of the first article
                cover:
                  type: string
                  format: url
                  example: https://s3.aws.example.com/23nds
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
              required: [title, body]
      responses:
        '201':
          description: Successfully created a new article
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: 'Article created successfully'
                  data:
                    $ref: '#/components/schemas/Article'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/articles/1'
                      author:
                        type: string
                        format: url
                        example: '/articles/1/author'
                      comments:
                        type: string
                        format: url
                        example: '/articles/1/comments'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/articles/{id}':
    get:
      tags: [articles]
      description: fetch a single article
      parameters:
        - $ref: "#/components/parameters/idPathParam"
        - in: query
          name: expand
          description:  expand author and comment object
          schema:
            type: string
            example:  'author,comment'
      responses:
        '200':
          description:  single article view
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Article"
                      - type: object
                        properties:
                          author:
                            $ref: "#/components/schemas/AuthorDTO"
                      - type: object
                        properties:
                          comments:
                            type: array
                            items:
                              $ref: "#/components/schemas/comment"
                          links:
                            type: object
                            properties:
                              self:
                                type: string
                                example:  "/articles/1"
                              author:
                                type: string
                                example:  "/articles/1/author"
                              comments:
                                type: string
                                example:  "/articles/1/comments"
                                    
        '404':
          $ref: "#/components/responses/404"
        '400':
          $ref: "#/components/responses/400"
    put:
      description:  Create or update entiere article
      tags: [articles]
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example:  1
                title:
                  type: string
                  example:  article title
                body:
                  type: string
                  format: text
                  example:  article body
                cover:
                  type: string
                  format: url
                  example:  'https://imge.com'
                statues:
                  type: string
                  enum: [draft,published]
                  example:  draft
              required: [title, body]
                  
      responses:
        "200":
          description:  successfull update
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleUpdateDTO"
        "201":
          description: succefull created
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleCreateDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
    patch:
      tags: [articles]
      description:  partially updated an article
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                title:
                  type: string
                  example:  article title
                body:
                  type: string
                  format: text
                  example:  article body
                cover:
                  type: string
                  format: url
                  example:  'http://imge.com'
                status:
                  type: string
                  enum: [draft,publish]
                  example:  draft
      responses:
        "200":
          description:  successfull updated
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleUpdateDTO"
        "404":
          $ref: "#/components/responses/404"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
    delete:
      tags: [articles]
      description:  deleted
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: "Article deleted successfully"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  '/comments/':
    get:
      tags: [comment]
      description:  retrive all comments
      parameters:
        - $ref: "#/components/parameters/pagePram"
        - $ref: "#/components/parameters/limitPram"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/postParam"
        - $ref: "#/components/parameters/authorParam"
      responses:
        '200':
          description:  retrice all comment successfull
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int32
                        example:  commentid1
                      post:
                        type: object
                        properties:
                          id:
                            type: integer
                            format: int32
                            example:  postid32
                          title:
                            type: string
                            example:  post title
                      title:
                        type: string
                        example:  comment title
                      cover:
                        type: string
                        format: url
                        example:  'http://covverimge.com'
                      author:
                        $ref: "#/components/schemas/AuthorDTO"
                      timestamp:
                        $ref: "#/components/schemas/Timestamp"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  link:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example:  'http://selflink.com'
                      nextPage:
                        type: string
                        format: url
                        example:  'http://nextpage.com'
                      prevPage:
                        type: string
                        format: url
                        example:  'http://prevpage.com'
                      post:
                        type: string
                        format: url
                        example:  'http://postlink.com'
                      author:
                        type: string
                        format: url
                        example:  'http://authorlink.com'
        '400':
          $ref: "#/components/responses/400"
  '/comments':
    post:
      tags: [comment]
      description:  create a  comment
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                postId:
                  type: integer
                  format: int32
                  example:  23
                body:
                  type: string
                  example:  one comment text
      responses:
        '201':
          description:  comment created sucessfull
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:  created sucessfull
                  data:
                    type: string
                    format: text
                    example:  this is comment data
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example:  'http://commenlink.com'
        '400':
          description:  create not sucessfull
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:  bad request
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example:  commentBody
                        message:
                          type: string
                          example:  Bad request
        '401':
          $ref: "#/components/responses/401"
  '/comments/{id}':
    patch:
      tags: [comment]
      description:  create a  comment
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                body:
                  type: string
                  example:  one comment text
                status:
                  type: string
                  enum: [draft,published]
                  example:  draft
      responses:
        '201':
          description:  comment updated sucessfull
          content:
            'application/json':
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:  updated sucessfull
                  data:
                    type: string
                    format: text
                    example:  this is comment data
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example:  'http://commenlink.com' 
        '404':
          $ref: "#/components/responses/404"
        '401':
          $ref: "#/components/responses/401"
    delete:
      tags: [comment]
      description:  deleted comments
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        '204':
          description:  succeeded but returns no message body.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  code: 
                    type: integer
                    format: int32
                    example: 204
        '404':
          $ref: "#/components/responses/404"
        '401':
          $ref: "#/components/responses/401"

      
     
  
        
                          
                      
                      
              
                  
        
        
    
                    
        
                    
                    
                    
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    "500":
      description: Internal Server error
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: internal server error
              message:
                type: string
                example: we are sorry for the inconvenience.
    '401':
      description: Unauthorized
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    "400":
      description: 'Bad Request'
      content:
        'application/json':
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field: 
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    "404":
      description:  Resource not found
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format:  int32
                example:  404
              error:
                type: string
                example:  not found
              message:
                type: string
                example:  Requestd resource not found
  schemas:
    comment:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            articleId:
              type: integer
              format: int32
              example: 1
            body:
              type: string
              format: text
              example: The body of the comment
            status:
              type: string
              enum: [public, private]
              example: public
          required: [id, authorId, articleId, body, status]
        - $ref: "#/components/schemas/Timestamp"
    Article:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            title:
              type: string
              example: First Article
            body:
              type: string
              format: text
              example: The body of the first article
            cover:
              type: string
              format: url
              example: https://s3.aws.example.com/23nds
            status:
              type: string
              enum: [draft, published]
              example: draft
          required: [id, authorId, title, body, status]
        - $ref: '#/components/schemas/Timestamp'
    ArticleCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: "Article created successfully"
        data:
          $ref: "#/components/schemas/Article"
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: "/articles/1"
            author:
              type: string
              format: url
              example: "/articles/1/author"
            comments:
              type: string
              format: url
              example: "/articles/1/comments"
    ArticleUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Article updated successfully
        data:
          $ref: "#/components/schemas/Article"
        links:
          type: object
          properties:
            self:
              type: string
              example: "/articles/1"
    Pagination:
        type: object
        properties:
          page:
            type: integer
            format: int32
            example: 2
          limit:
            type: integer
            format: int32
            example: 10
          next:
            type: integer
            format: int32
            example: 3
          prev:
            type: integer
            format: int32
            example: 1
          totalPage:
            type: integer
            format: int32
            example: 5
          totalItems:
            type: integer
            format: int32
            example: 50
        required:
          - page
          - limit
          - totalPage
          - totalItems
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime
      required: [createdAt, updatedAt]
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name: 
          type: string
          example: 'A.B Raihan'
      required: [id, name]
      
      
      
  parameters:
    pagePram:
      in: query
      name: limit
      description: current page number
      schema:
        type: integer
        format: int32
        example: 2
    limitPram:
      in: query
      name: limit
      description: maximum items to be returned
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: type of sort (asc or dsc)
      schema:
        type: string
        enum: [asc, dsc]
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Sort key
      schema:
        type: string
        example: updatedAt
    searchParam:
      in: query
      name: search
      description: Search term
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description:  article ID
      schema:
        type: integer
        format: int32
        example:  1
    postParam:
      in: path
      name: id
      required: true
      description:  postId
      schema:
        type: integer
        format: int32
        example:  5555
    authorParam:
      in: path
      name: id
      required: true
      description:  authorID
      schema:
        type: integer
        format: int32
        example:  2222